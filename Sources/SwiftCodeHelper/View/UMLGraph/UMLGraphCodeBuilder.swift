import SimpleCodeToGraphPumper
import SwiftSoftwareSystemModel

/// Generates UMLGraph code and then (if possible) runs tooling to create the UML graph proper
public class UMLGraphCodeBuilder: ModelDisplay {

    private lazy var pumper: PumperMain = {
        let ret = PumperMain()
        ret.executeSetup()
        return ret
    }()

    public init(){}

    public func display(model: SystemModel) -> Bool {

        //  See https://www.spinellis.gr/umlgraph/doc/indexw.html for specifics on how to code for this framework
        var generatedCode: String = 
"""
//  Code generated by SwiftCodeHelper, by Kevin R. VanDenBreemen
/**
 * @opt inferrel
 * @opt inferdep
 * @opt attributes
 * @opt types
 * @opt hide java.*
 * @hidden
 */
class UMLOptions {}
"""

        model.classes.forEach { clz in 
            let generator = ClassCoder(for: clz)
            generatedCode += "\n\(generator.generateCode())"
        }

        model.interfaces.forEach{ iFce in 
            let generator = InterfaceCoder(for: iFce)
            generatedCode += "\n\(generator.generateCode())"
        }

        if !pumper.pumpOut(with: generatedCode) {
            debugPrint("One or more errors occurred")
            return false
        }

        print("UML Diagrammer Step Succeeded")

        return true
        
    }
}